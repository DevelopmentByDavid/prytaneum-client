// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../../prisma"
}

model User {
    userId String @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now())
    email String @unique @db.VarChar(320)
    firstName String? @db.VarChar(100)
    lastName String? @db.VarChar(100)
    fullName String? @db.VarChar(200) // computed field, recomputed on name update
    password String?
    preferredLang String @db.VarChar(30)
    canMakeOrgs Boolean @default(false) 

    memberOf OrgMember[]
    feedback EventLiveFeedback[]
    questions EventQuestion[]
    likes EventQuestionLike[]
    moderatorOf EventModerator[]
    speakerOf EventSpeaker[]
    registrantOf EventRegistrant[]
}

model Organization {
    orgId String @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now())
    name String @db.VarChar(100)
    
    members OrgMember[]
    events Event[]
}

model OrgMember {
    userId String @db.Uuid
    orgId String @db.Uuid
    organization Organization @relation(fields: [orgId], references: [orgId])
    user User @relation(fields: [userId], references: [userId])
    events Event[]
    // orgName String // de-normalized field from an Organization
    // memberName String // denormalized field from the User 

    @@id([userId, orgId])
}

model Event {
    eventId String @id @default(uuid()) @db.Uuid
    createdById String @db.Uuid
    orgId String @db.Uuid
    organization Organization @relation(fields: [orgId], references: [orgId])
    createdByUser OrgMember @relation(fields: [createdById, orgId], references: [userId, orgId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    title String @db.VarChar(100)
    startDateTime DateTime
    endDateTime DateTime
    description String @db.VarChar(500)
    topic String @db.VarChar(50)
    currentQuestion Int @default(-1)
    // settings defaults are built into the business logic layer rather than the db layer
    isActive Boolean
    isQuestionFeedVisible Boolean
    isCollectRatingsEnabled Boolean
    isForumEnabled Boolean
    isPrivate Boolean

    feedback EventLiveFeedback[]
    questions EventQuestion[]
    moderators EventModerator[]
    speakers EventSpeaker[]
    registrants EventRegistrant[]
    videos EventVideo[]
}

model EventVideo {
    eventId String @db.Uuid
    event Event @relation(fields: [eventId], references: [eventId])
    url String
    lang String

    @@id([eventId, url])
}

model EventLiveFeedback {
    feedbackId String @id @default(uuid()) @db.Uuid
    createdById String @db.Uuid
    createdByUser User @relation(fields: [createdById], references: [userId])
    eventId String @db.Uuid
    event Event @relation(fields: [eventId], references: [eventId])
    createdAt DateTime @default(now())
    message String @db.VarChar(500)
}

model EventQuestion {
    questionId String @id @default(uuid()) @db.Uuid
    eventId String @db.Uuid
    event Event @relation(fields: [eventId], references: [eventId])
    createdAt DateTime @default(now())
    refQuestionId String? @db.Uuid
    parentQuestion EventQuestion[] @relation("quote")
    refQuestion EventQuestion? @relation("quote", fields: [refQuestionId], references: [questionId])
    createdById String @db.Uuid
    createdByUser User @relation(fields: [createdById], references: [userId])
    question String @db.VarChar(500)
    position Int
    isVisible Boolean
    isAsked Boolean
    lang String @db.VarChar(30)
    isFollowUp Boolean
    isQuote Boolean
    
    likes EventQuestionLike[]
}

model EventQuestionLike {
    likedQuestion String @db.Uuid
    likedBy String @db.Uuid
    question EventQuestion @relation(fields: [likedQuestion], references: [questionId])
    user User @relation(fields: [likedBy], references: [userId])

    @@id([likedBy, likedQuestion])
}

model EventModerator {
    eventId String @db.Uuid
    userId String @db.Uuid
    user User @relation(fields: [userId], references: [userId])
    event Event @relation(fields: [eventId], references: [eventId])

    @@id([eventId, userId])
}

model EventSpeaker {
    eventId String @db.Uuid
    userId String @db.Uuid
    name String @db.VarChar(100)
    description String @db.VarChar(500)
    title String @db.VarChar(100)
    pictureUrl String @db.VarChar(200)
    event Event @relation(fields: [eventId], references: [eventId])
    user User @relation(fields: [userId], references: [userId])

    @@id([eventId, userId])
}

model EventRegistrant {
    userId String @db.Uuid
    eventId String @db.Uuid
    user User @relation(fields: [userId], references: [userId])
    event Event @relation(fields: [eventId], references: [eventId])

    @@id([userId, eventId])
}
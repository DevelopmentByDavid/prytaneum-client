type Organization {
    """
    Unique identifier for this org
    """
    orgId: ID!
    """
    name of the org
    """
    name: String!
    """
    When this org was created
    """
    createdAt: Date
    """
    all members of this org
    """
    members: [User]
    """
    Events owned by this organization
    """
    events: [Event]
}

"""
Necessary information for org creation
"""
input CreateOrg {
    name: String!
}

"""
Information that may be updated by the user
"""
input UpdateOrg {
    id: ID!
    name: String!
}

"""
Information necessary for deleting an org
"""
input DeleteOrg {
    id: ID!
}

"""
Info necessary for adding a member to an organization
"""
input NewMember {
    email: String!
}

type Mutation {
    createOrganization(input: CreateOrg): Organization
    updateOrganizationById(input: UpdateOrg): Organization
    deleteOrganizationById(input: DeleteOrg): Organization

    """
    Adds a new member and returns the new user added
    """
    addMember(input: NewMember): User
}

type Query {
    """
    Fetch organizations relevant to the current user
    """
    myOrgs: [Organization]
    
    """
    Fetch data about a particular org
    """
    orgById(id: ID!): Organization
}
type Organization implements Node {
    """
    Unique identifier for this org
    """
    id: ID!
    """
    name of the org
    """
    name: String!
    """
    When this org was created
    """
    createdAt: Date
    """
    all members of this org
    """
    members: UserConnection
    """
    Events owned by this organization
    """
    events: EventConnection
}

type OrganizationEdge {
    node: Organization!
    cursor: String!
}

type OrganizationConnection {
    edges: [OrganizationEdge!]
    pageInfo: PageInfo!
}

"""
Necessary information for org creation
"""
input CreateOrg {
    name: String!
}

"""
Information that may be updated by the user
"""
input UpdateOrg {
    orgId: ID!
    name: String!
}

"""
Information necessary for deleting an org
"""
input DeleteOrg {
    orgId: ID!
}

"""
Info necessary for adding a member to an organization
"""
input NewMember {
    email: String!
}

type Mutation {
    createOrganization(input: CreateOrg!): Organization
    updateOrganizationById(input: UpdateOrg!): Organization
    deleteOrganizationById(input: DeleteOrg!): Organization

    """
    Adds a new member and returns the new user added
    """
    addMember(input: NewMember!): User
}

type Query {
    """
    Fetch organizations relevant to the current user
    """
    myOrgs: [Organization!]
}

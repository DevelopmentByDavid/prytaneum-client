type Event implements Node {
    id: ID!

    """
    Creator of this event
    """
    createdBy: User

    """
    The owning organization
    """
    organization: Organization
    createdAt: Date
    updatedAt: Date
    title: String

    """
    The planned start date time string
    """
    startDateTime: Date

    """
    The planned end date time string
    """
    endDateTime: Date
    description: String
    topic: String

    """
    Whether or not the Event is live
    """
    isActive: Boolean

    """
    Let all users see what questions have been submitted
    """
    isQuestionFeedVisible: Boolean

    """
    Collect user ratings after the event has ended
    """
    isCollectRatingsEnabled: Boolean

    """
    Display a forum-like interface once the "live" part of the event is over
    """
    isForumEnabled: Boolean

    """
    Is the event private, ie invite only
    """
    isPrivate: Boolean

    """
    All questions relating to this event
    """
    questions: [EventQuestion!]

    """
    Speakers for this event
    """
    speakers: [EventSpeaker!]

    """
    Registrants for this event -- individuals invited
    """
    registrants: UserConnection

    """
    Participants of the event -- individuals who showed up
    """
    participants: [EventParticipant!]

    """
    Video feeds and the languages
    """
    videos: EventVideoConnection

    """
    Live Feedback given during the event
    """
    liveFeedback: [EventLiveFeedback!]

    """
    List of moderators for this particular event
    """
    moderators: UserConnection

    """
    Whether or not the viewer is a moderator
    """
    isViewerModerator: Boolean
}

"""
Event Edge
"""
type EventEdge {
    node: Event!
    cursor: String!
}

"""
Connection to Events
"""
type EventConnection {
    edges: [EventEdge!]
    pageInfo: PageInfo!
}

input CreateEvent {
    title: String!
    startDateTime: Date!
    endDateTime: Date!
    description: String!
    topic: String!
    orgId: String!
}

input UpdateEvent {
    title: String
    startDateTime: Date
    endDateTime: Date
    description: String
    topic: String
    isQuestionFeedVisible: Boolean
    isCollectRatingsEnabled: Boolean
    isForumEnabled: Boolean
    isPrivate: Boolean
    eventId: String!
}

input DeleteEvent {
    eventId: String!
}

type Mutation {
    createEvent(event: CreateEvent!): Event
    updateEvent(event: UpdateEvent!): Event
    deleteEvent(event: DeleteEvent!): Event

    """
    Start the event so that it is "live"
    """
    startEvent(eventId: String!): Event

    """
    End the eent so that it is not live
    """
    endEvent(eventId: String!): Event
}

type Query {
    """
    Fetch all events
    """
    events: [Event!]
}

type Subscription {
    questionPosition(eventId: ID!): Int!
}
